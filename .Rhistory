setwd("~/GitHub/")
parentDir <- getwd()
dataDir <- paste0(parentDir, "/", directory, "/")
setwd(dataDir)
A <- read.csv(sprintf("001.csv"))
A
names(A)
A$sulfate
cbind(A$sulfate, A$nitrate)
X <- as.data.frame(cbind(A$sulfate, A$nitrate))
X
str(X)
summary(X)
?corr
?cor
cor(X)
cor(v)
cov(X)
var(X)
cor(X, use = "pairwise.complete.obs")
cor(X[,1], X[,2], use = "pairwise.complete.obs")
X
head(X)
X <- cbind(A$sulfate, A$nitrate)
cor(X, use = "pairwise.complete.obs")
cor(X[,1], X[,2], use = "pairwise.complete.obs")
head(X)
source('~/GitHub/specdata/corr.R')
source('~/GitHub/specdata/corr.R')
source('~/GitHub/specdata/corr.R')
source('~/GitHub/specdata/corr.R')
source('~/GitHub/specdata/corr.R')
cr <- corr("specdata", 150)
head(cr)
source('~/GitHub/specdata/corr.R')
cr <- corr("specdata", 150)
head(cr)
setwd("~/GitHub/")
parentDir <- getwd()
dataDir <- paste0(parentDir, "/", directory, "/")
setwd(dataDir)
corVec <- c()
i = 1
monitor <- read.csv(sprintf("%.3d.csv", i))
monitor
monitor[,1]
source('~/GitHub/specdata/corr.R')
cr <- corr("specdata", 150)
head(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit
submit()
source('~/GitHub/submitscript1.R')
submit()
source('~/GitHub/specdata/submitscript1.R')
submit()
submit()
submit()
setwd("~/GitHub/specdata/")
source('~/GitHub/specdata/submitscript1.R')
submit()
submit()
setwd("~/GitHub/specdata/")
source('~/GitHub/specdata/submitscript1.R')
submit()
submit()
submit()
submit()
setwd("~/GitHub/specdata/")
source('~/GitHub/specdata/submitscript1.R')
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
fileUrl("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx ")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx "
library(xlsx)
colIdx <- 7:15
rowIdx <- 18:23
dat <- read.xlsx("gas.xlsx", sheetIndex=1
dat <- read.xlsx("gas.xlsx", sheetIndex=1, colIndex=colIdx, rowIndex=rowIdx)
setwd("~/GitHub")
dat <- read.xlsx("gas.xlsx", sheetIndex=1, colIndex=colIdx, rowIndex=rowIdx)
sum(dat$Zip*dat$Ext,na.rm=T)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
download.file(fileUrl, destfile="~/GitHub/rest.xml", method = "curl")
library(XML)
doc <- xmlTreeParse("rest.xml", useInternalNodes=TRUE)
rootNode <- xmlRoot(doc)
xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode <- xmlRoot(doc)
rootnode
rootNode
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
doc2 <- htmlTreeParse("rest.xml", useInternalNodes=TRUE)
doc2
restart
restart()
ls()
library(XML)
doc <- xmlTreeParse("rest.xml", useInternalNodes=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]][[1]]
xmlSApply(rootNode, xmlValue)
ls()
dir()
library(XML)
installed.packages()
library("rstudio", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
doc <- xmlTreeParse("restaurants.xml", useInternalNodes=T)
top <- xmlRoot(doc)
xmlName(top)
names(top)
names(top[[1]])
names(top[[[1]]])
names(top)
top[[1]][[1]]
doc <- xmlTreeParse("restaurants.xml", useInternalNodes=T)
top <- xmlRoot(doc)
xmlName(top)
names(top)
names(top[[1]])
top[[1]][[1]]
xpathSApply(top, "//zipcode", xmlValue)
zip <- xpathSApply(top, "//zipcode", xmlValue)
zip == "21231"
ok <- zip == "21231"
zip2 <- zip[ok]
zip2
length(zip2)
library(data.table)
install.packages(data.table)
install.packages("data.table")
library(data.table)
help("data.table")
install.packages("ISwR")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
install.packages("plyr")
swirl()
library(swirl)
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Danilo Carvalho")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1, 2, 3), c("X","Y","Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
data(mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, mtcars)
fit1
summary(fit1)
fit1 <- lm(mpg ~ factor(cyl)*wt, mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, mtcars)
fit2 <- lm(mpg ~ factor(cyl)*wt, mtcars)
summary(fit2)
fit2 <- lm(mpg ~ factor(cyl), mtcars)
fit2 <- lm(mpg ~ factor(cyl)*wt, mtcars)
fit3 <- lm(mpg ~ factor(cyl), mtcars)
summary(fit3)
plot(mtcars$mpg ~ factor(mtcars$cyl)
)
abline(fit3)
abline(fit2)
abline(fit1)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit5 <- lm(y ~ x)
H <- fitted(fit5)
H
hat(H)
plot(y ~ x)
abline(fit5)
plot(y ~ H)
plot(x ~ H)
fitted(fit5)
plot(y ~ H)
plot(y~x)
abline(fit5)
resid(fit5)
?dfbeta
dfbeta(fit5)
dfbeta(H)
dfbeta(y,H)
dfbeta(fitted(fit5)
)
?influence
?influence.measures
hatavalues(fit5)
hatvalues(fit5)
dfbeta(fit5)
summary(dfbeta(fit5))
rstandard(fit5)
rstudent(fit5)
dfbeta(hatvalues(fit5))
c(10, rnorm(100))
x <- c(10, rnorm(100))
y <- c(10, rnorm(100))
plot(y ~ x, frame = FALSE, bg = "liightblue", pch=21, cex=2, col="black")
plot(y ~ x, frame = FALSE, bg = "lightblue", pch=21, cex=2, col="black")
abline(lm(y~x))
x
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plot(y ~ x, frame = FALSE, bg = "lightblue", pch=21, cex=2, col="black")
abline(lm(y~x))
hatvalues(lm(y~x))
dfbeta(lm(y~x))
dfbeta(lm(y~x)[,2])
dfbeta(lm(y~x))[,2]
hatvalues(lm(y~x))
dfbeta(lm(y~x))[,2]
dfbetas(lm(y~x))[,2]
fit1 <- lm(mpg ~ factor(cyl)*wt, mtcars)
plot(resid(fit1) ~ predict(fit1))
fit2 <- lm(mpg ~ factor(cyl), mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, mtcars)
lm(wt ~ factor(cyl))
lm(wt ~ factor(cyl), mtcars)
summary(lm(wt ~ factor(cyl), mtcars))
plot(wt ~ factor(cyl), data =mtcars, frame = FALSE, bg = "lightblue", pch=21, cex=2, col="black")
plot(wt ~ factor(cyl), data =mtcars)
abline(lm(wt ~ factor(cyl), mtcars))
plot(wt ~ cyl, data =mtcars)
abline(lm(wt ~ cyl, mtcars))
plot(resid(lm(mpg ~ factor(cyl) * wt, data=mtcars)) ~ resid(lm(wt ~ factor(cyl), data = mtcars))
)
plot(resid(lm(mpg ~ factor(cyl) * wt, data=mtcars)) ~ resid(lm(factor(cyl) ~ wt, data = mtcars)))
plot(resid(lm(mpg ~ factor(cyl) * wt, data=mtcars)) ~ resid(lm(wt ~ factor(cyl), data = mtcars)))
plot(resid(lm(mpg ~ factor(cyl) * wt, data=mtcars)) ~ resid(lm(wt ~ factor(cyl), data = mtcars)), col = mtcars$cyl)
plot(mpg ~ wt, data=mtcars, col = mtcars$cyl)
abline(mpg ~ cyl*wt, mtcars)
abline(lm(mpg ~ cyl*wt, mtcars)
)
abline(lm(mpg ~ factor(cyl)*wt, mtcars)
)
abline(lm(mpg ~ factor(cyl) + wt, mtcars)
)
abline(lm(mpg ~ factor(cyl), mtcars)
)
fit1
summary(fit1)
x <- rnorm(100, 10, 2)
sd(x)
sd(x)^2
x <- rnorm(100, 10, 2)
sd(x)
plot(x)
hist(x)
?density
density(x)
plot(density(x))
z <- (x - mean(x))/sd(x)
z
abline(z)
abline(v=z)
lines(v=z)
lines(z)
lines(mean(x))
lines(mean(x))
plot(density(x))
lines(mean(x))
lines(0)
lines(mean(x))
lines(density(z))
plot(z)
plot(density(z)
)
mean(z)
sd(z)
fit <- lm(mpg ~ factor(cyl), mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, mtcars)
fit2 <- lm(mpg ~ factor(cyl)*wt, mtcars)
plot(fit)
par(mfrow=c(2,2))
plot(fit)
par(mfrow=c(2,2))
plot(fit1)
par(mfrow=c(2,2))
plot(fit2)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
model <- lm(y~x)
hatvalues(model)
which.max(hatvalues(model))
which.max(hatvalues(model))
max(hatvalues(model))
hatvalues(model)[5]
hatvalues(model)[5][5]
hatvalues(model)[5][1]
hatvalues(model)[5][2]
hatvalues(model)[[5]]
dfbetas(model)[[5]]
dfbetas(model)
max(dfbetas(model))
which.max(dfbetas(model))
hatvalues(model)[which.max(hatvalues(model))]
summary(fit)
summary(fit1)
summary(fit2)
vif(fit)
install.packages("car")
library(car)
vif(fit)
vif(fit1)
vif(fit2)
summary(vif(fit3))
summary(vif(fit2))
vif(fit2)
summary(fit2)
str(fit2)
?summary.lm
cov.unscaeled(fit2)
summary(fit2)$cov.unscaeled
summary(fit2)[cov.unscaeled]
summary(fit2, correlation=TRUE)
?summary.lm
summary.lm(fit2)
summary.lm(fit2, cov.unscaled)
summary.lm(cov.unscaled)
summary.lm(fit2, cov.unscaled)
cov.unscaled(fit2)
summary.lm(fit2)$cov.unscaled
plot(summary.lm(fit2)$cov.unscaled)
library(MASS)
library(ISLR)
X <- rnorm(1000, 50, 10)
X
plot(density(X))
plot(density(X))
x <- sample(100, X)
x
lines(density(x))
plot(density(x))
se <- sd(X)/sqrt(100)
z <- (mean(x) - mean(X))/se
z
mean(x)
mean(X)
?qt
summary(fit)
summary(fit1)
install.packages("epicalc")
library(epicalc)
install.packages("lrtest")
install.packages("lmtest")
library(lmtest)
lrtest(fit, fit1)
lrtest(fit, fit1, fit2)
anova(fit, fit1, fit2)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
fit1
lm(mpg ~ wt + factor(cyl), data = mtcars)
str(mtcars)
?mtcars
.99*.001/(.99*.001)+(.01*.001)
?poisson
library(ISLR)
data(sMarket)
data(Smarket)
names(Smarket)
summary(Smarket)
str(Smarket)
pairs(Smarket)
cor(Smarket[,9])
cor(Smarket[,-9])
plot(Volume, data=Smarket)
plot(Smarket$Volume)
fit <- glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data=Smarket, family=binomial)
summary(fit)
coef(fit)
summary(fit)$coef
summary(fit)$coef[4]
summary(fit)$coef[,4]
x <- 4L
x <- c(x, "a", TRUE)
x
class(x)
x <- list(2, "a", "b", TRUE)
x[[1]]
class(x[[1]])
str(x[[1]])
is.vector(x[[1]])
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
quartz()
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
quartz()
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
dim(training)
dim(testing)
p1 <- qplot(training$CompressiveStrength, inTrain, fill=inTrain, geomc("boxplot"))
quarz()
quartz()
p1 <- qplot(training$CompressiveStrength, inTrain, fill=inTrain, geomc("boxplot"))
p1
p1 <- qplot(inTrain, CompressiveStrength, data=training, fill=inTrain, geomc("boxplot"))
p1
p1 <- qplot(inTrain, CompressiveStrength, data=training, fill=inTrain, geom=c("boxplot"))
p1
p1 <- qplot(inTrain, CompressiveStrength, data=training, fill=c(names(mixture)), geom=c("jitter"))
p1
p1 <- qplot(inTrain, CompressiveStrength, data=training, fill=c(names(mixture)[-1]), geom=c("jitter"))
p1
p1 <- qplot(inTrain, CompressiveStrength, data=training, fill=c(names(mixtures)[-1]), geom=c("jitter"))
p1
p1 <- qplot(inTrain, CompressiveStrength, data=training, fill=c(names(mixtures)), geom=c("jitter"))
p1
libray(Hmisc)
install.pakages(Hmisc)
install.pakages("Hmisc")
install.packages("Hmisc")
library(Hmisc)
cut.compr = cut2(mixtures$CompressiveStrength, g=3)
p1 <- qplot(inTrain, CompressiveStrength, data=training, fill=cut2(mixtures$CompressiveStrength), geom=c("jitter"))
p1
p1 <- qplot(mixtures$CompressiveStrength), CompressiveStrength, data=training, fill=cut2(mixtures$CompressiveStrength), geom=c("jitter"))
p1 <- qplot(mixtures$CompressiveStrength, CompressiveStrength, data=training, fill=cut2(mixtures$CompressiveStrength), geom=c("jitter"))
p1
cuteTrain = cut2(mixtures$CompressiveStrength)
rm
ls()
cuteTrain = cut2(mixtures$CompressiveStrength, g=3)
a =rnorm(1000, 0)
a =rnorm(0, w)
a =rnorm(1000)
setwd("~/GitHub/RepData_PeerAssessment1/")
library(data.table)
library(ggplot2)
if (file.exists("processedData.RData")) {
load("processedData.RData")
} else {
unzip("activity.zip")
DT <- data.table(fread("activity.csv"))
DT[, date := as.Date(date, format = "%Y-%m-%d")]
DT[, interval:= rep(0:287, 61)*5]
DT[, steps:= as.numeric(steps)]
save(DT, file = "processedData.RData")
}
DTraw <- copy(DT)
DT <- DT.raw[complete.cases(DT)]
DT <- DTraw[complete.cases(DT)]
DT
DTsum <- DT[!is.na(DT[,steps]),sum(steps),by=date]
setnames(stepsDate, "V1", "steps")
DTavg <- DT[!is.na(DT[,steps]),sum(steps),by=intID]
setnames(stepsInt, "V1", "avg")
class(DT[,date])
